import argparse
import json
import socket
import threading
import time
import logging

#Azin -- Send data on a destination listening port
# iterate the peerList and sent message
def broadcastData(host, LPORT, data):
    logging.info("sending data")
    server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    message = {'host': host, 'port': LPORT, 'data': data}
    encode_data = json.dumps(message, indent=2).encode('utf-8')
    server.sendto(encode_data, ('<broadcast>', LPORT))
    time.sleep(5)
# listen on my listening port    
def broadcastListener( LPORT, handler) :
    try :
        logging.info("in Broadcast Lister")
        client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        client.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        client.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        client.bind(("", LPORT))
        while True:
            data = client.recvfrom(1024)
            decoded_data = json.loads(data[0].decode('utf-8'))
            handler(decoded_data) # thread ?
    except Exception as e:
        logging.info(e, exc_info=True)
        broadcastListener( LPORT, handler)

def handleRecievedData( data) :
    print("Recieved data ->" +str( data))
#Azin

my_parser = argparse.ArgumentParser(description='command to execute the ./server script')
my_parser.add_argument('--listen_port', help='listening_port', required=True)
my_parser.add_argument('--listen_port_of_neighbour', help='listening_port_of_neighbour', required=True)
args = my_parser.parse_args()
hostname = socket.gethostname()
host = socket.gethostbyname(hostname)

#Azin --- Testing
test_list_port = args.listen_port_of_neighbour
alertsListenerThread = threading.Thread(target=broadcastListener, args=( int(args.listen_port), handleRecievedData, ))
alertsBroadCastingThread = threading.Thread(target=broadcastData, args=(host, int(test_list_port),"sampleMessage" + args.listen_port, ))
alertsListenerThread.start()
alertsBroadCastingThread.start()
#Azin